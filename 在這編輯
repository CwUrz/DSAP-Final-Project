#include <functional>
#include <vector>
#include <queue>
#include <algorithm>
#include <climits>
#include <unordered_set>
#include <utility>

class GamePlayer final : public Feis::IGamePlayer {
private:
    struct Action {
        Feis::PlayerActionType type;
        Feis::CellPosition       pos;
    };

    std::vector<Action> actions_;  
    size_t              action_index_ = 0;
    bool                initialized_  = false;

    using Pos = Feis::CellPosition;
    static constexpr int H = Feis::GameManagerConfig::kBoardHeight;
    static constexpr int W = Feis::GameManagerConfig::kBoardWidth;
    static constexpr std::size_t G = Feis::GameManagerConfig::kGoalSize;

    inline static constexpr std::array<Feis::Direction,4> dirs = {
        Feis::Direction::kLeft,
        Feis::Direction::kTop,
        Feis::Direction::kRight,
        Feis::Direction::kBottom
    };

    Feis::PlayerActionType MachineType(Feis::Direction d) const {
        switch (d) {
            case Feis::Direction::kLeft:   return Feis::PlayerActionType::BuildLeftOutMiningMachine;
            case Feis::Direction::kTop:    return Feis::PlayerActionType::BuildTopOutMiningMachine;
            case Feis::Direction::kRight:  return Feis::PlayerActionType::BuildRightOutMiningMachine;
            case Feis::Direction::kBottom: return Feis::PlayerActionType::BuildBottomOutMiningMachine;
        }
        return Feis::PlayerActionType::None;
    }
    Feis::PlayerActionType ConveyorType(Feis::Direction d) const {
        switch (d) {
            case Feis::Direction::kLeft:   return Feis::PlayerActionType::BuildRightToLeftConveyor;
            case Feis::Direction::kTop:    return Feis::PlayerActionType::BuildBottomToTopConveyor;
            case Feis::Direction::kRight:  return Feis::PlayerActionType::BuildLeftToRightConveyor;
            case Feis::Direction::kBottom: return Feis::PlayerActionType::BuildTopToBottomConveyor;
        }
        return Feis::PlayerActionType::None;
    }
    Feis::PlayerActionType CombinerType(Feis::Direction d) const {
        switch (d) {
            case Feis::Direction::kLeft:   return Feis::PlayerActionType::BuildLeftOutCombiner;
            case Feis::Direction::kTop:    return Feis::PlayerActionType::BuildTopOutCombiner;
            case Feis::Direction::kRight:  return Feis::PlayerActionType::BuildRightOutCombiner;
            case Feis::Direction::kBottom: return Feis::PlayerActionType::BuildBottomOutCombiner;
        }
        return Feis::PlayerActionType::None;
    }
    Feis::Direction OppositeDirection(Feis::Direction d) {
        switch (d) {
            case Feis::Direction::kTop:    return Feis::Direction::kBottom;
            case Feis::Direction::kBottom: return Feis::Direction::kTop;
            case Feis::Direction::kLeft:   return Feis::Direction::kRight;
            case Feis::Direction::kRight:  return Feis::Direction::kLeft;
        }
        return d;
    }


    inline int idx(Pos p) const { return p.row * W + p.col; }

    // 1) 收集所有中心入口
    std::vector<std::pair<Pos,Pos>> GetCenterEntrances(const Feis::IGameInfo& info) {
        std::vector<std::pair<Pos,Pos>> centerEntrances;
        int top  = Feis::GameManager::CollectionCenterConfig::kTop;
        int left = Feis::GameManager::CollectionCenterConfig::kLeft;
        for (int r = top; r < top + G; ++r) {
            for (int c = left; c < left + G; ++c) {
                Pos cc{r, c};
                for (auto d : dirs) {
                    Pos nb = Feis::GetNeighborCellPosition(cc, d);
                    if (Feis::IsWithinBoard(nb) && !info.GetLayeredCell(nb).GetForeground()) {
                        centerEntrances.emplace_back(nb, cc);
                    }
                }
            }
        }
        std::sort(centerEntrances.begin(), centerEntrances.end(),
                  [](const auto &a, const auto &b){
                      if (a.first.row != b.first.row) 
                          return a.first.row < b.first.row;
                      return a.first.col < b.first.col;
                  });
        centerEntrances.erase(
            std::unique(centerEntrances.begin(), centerEntrances.end(),
                        [](const auto &a, const auto &b){ return a.first == b.first; }),
            centerEntrances.end());
        return centerEntrances;
    }

    void sortMines(std::vector<Pos>& mines){
        int top  = Feis::GameManager::CollectionCenterConfig::kTop;
        int left = Feis::GameManager::CollectionCenterConfig::kLeft;
        Pos center{ top + G/2, left + G/2 };
        std::sort(mines.begin(), mines.end(),
        [&](const Pos &a, const Pos &b){
            int da = std::abs(a.row-center.row) + std::abs(a.col-center.col);
            int db = std::abs(b.row-center.row) + std::abs(b.col-center.col);
            return da < db;
        });
    }
    std::vector<Pos> GetScoredMines(const Feis::IGameInfo& info, std::vector<Pos>& cbmines) {
        std::vector<Pos> mines;
        for (int r = 0; r < H; ++r) {
            for (int c = 0; c < W; ++c) {
                Pos p{r,c};
                if (auto bg = info.GetLayeredCell(p).GetBackground()) {
                    if (auto num = dynamic_cast<const Feis::NumberCell*>(bg.get())) {
                        if (info.IsScoredProduct(num->GetNumber()))
                            mines.push_back(p);
                        else cbmines.push_back(p);
                    }
                }
            }
        }
        sortMines(mines);
        sortMines(cbmines);
        return mines;
    }

    std::vector<Pos> bfsBetween(const Feis::IGameInfo& info, Pos src, Pos dst) {
        std::vector<int> dist(H*W, -1);
        std::vector<Pos> prev(H*W);
        std::queue<Pos>  q;
        dist[idx(src)] = 0; prev[idx(src)] = src; q.push(src);

        while (!q.empty()) {
            Pos u = q.front(); q.pop();
            if (u == dst) break;
            for (auto d : dirs) {
                Pos v = Feis::GetNeighborCellPosition(u, d);
                if (!Feis::IsWithinBoard(v) || dist[idx(v)] >= 0) continue;
                if (auto fg = info.GetLayeredCell(v).GetForeground())
                    if (!dynamic_cast<const Feis::ConveyorCell*>(fg.get()))
                        continue;
                if (auto bg = info.GetLayeredCell(v).GetBackground())
                    if (dynamic_cast<const Feis::NumberCell*>(bg.get()))
                        continue;
                dist[idx(v)] = dist[idx(u)] + 1;
                prev[idx(v)] = u;
                q.push(v);
            }
        }
        if (dist[idx(dst)] < 0) return {};
        std::vector<Pos> path;
        for (Pos cur = dst; cur != src; cur = prev[idx(cur)])
            path.push_back(cur);
        std::reverse(path.begin(), path.end());
        return path;
    }

    std::vector<Pos> FindNearestTarget(
        const Feis::IGameInfo& info,
        Pos m,
        const std::vector<Pos>& builtConveyors,
        const std::vector<std::pair<Pos, Pos>>& centerEntrances,
        Pos& linkEnd
    ) {
        std::vector<int> dist(H*W, -1);
        std::vector<Pos> prev(H*W);
        std::queue<Pos>  q;
        dist[idx(m)] = 0; prev[idx(m)] = m; q.push(m);

        Pos convPos{-1,-1}, cenPos{-1,-1}, cenCenter{-1,-1};
        bool foundConv=false, foundCen=false;

        while (!q.empty() && (!foundConv||!foundCen)) {
            Pos u = q.front(); q.pop();
            int dcur = dist[idx(u)];
            // check conveyor
            if (!foundConv) {
                bool isConv = false;
                if (auto fg = info.GetLayeredCell(u).GetForeground())
                    if (dynamic_cast<const Feis::ConveyorCell*>(fg.get()))
                        isConv = true;
                for (auto &bc: builtConveyors)
                    if (bc==u) { isConv=true; break; }
                if (isConv) { convPos=u; foundConv=true; }
            }
            // check centerEntrance
            if (!foundCen) {
                for (auto &tp : centerEntrances) {
                    if (tp.first == u) {
                        cenPos = u;
                        cenCenter = tp.second;
                        foundCen = true;
                        break;
                    }
                }
            }
            if (foundConv && foundCen) break;
            // extend
            for (auto d : dirs) {
                Pos v = Feis::GetNeighborCellPosition(u, d);
                if (!Feis::IsWithinBoard(v) || dist[idx(v)]>=0) continue;
                if (auto fg2 = info.GetLayeredCell(v).GetForeground())
                    if (!dynamic_cast<const Feis::ConveyorCell*>(fg2.get()))
                        continue;
                if (auto bg2 = info.GetLayeredCell(v).GetBackground())
                    if (dynamic_cast<const Feis::NumberCell*>(bg2.get()))
                        continue;
                dist[idx(v)] = dcur + 1;
                prev[idx(v)] = u;
                q.push(v);
            }
        }

        int dConv = foundConv? dist[idx(convPos)] : INT_MAX;
        int dCen  = foundCen?  dist[idx(cenPos)]  : INT_MAX;
        bool useConv = (dConv <= dCen);
        Pos endPos  = useConv? convPos : cenPos;
        linkEnd = useConv? convPos : cenCenter;
        if (endPos.row<0) return {m};

        // path
        std::vector<Pos> path;
        for (Pos cur=endPos; cur!=m; cur=prev[idx(cur)])
            path.push_back(cur);
        std::reverse(path.begin(), path.end());
        if (path.empty()) return {m};
        return path;
    }


    void BuildConveyors(const std::vector<Pos>& path, Pos linkEnd, std::vector<Pos>& builtConveyors)
    {
        for (size_t i = 0; i < path.size(); ++i) {
            Pos src = path[i];
            Pos dst = (i + 1 < path.size()) ? path[i + 1] : linkEnd;
            Feis::Direction di = dirs[0];
            for (auto d : dirs)
                if (Feis::GetNeighborCellPosition(src, d) == dst) {
                    di = d;
                    break;
                }
            actions_.push_back({ ConveyorType(di), src });
            builtConveyors.push_back(src);
        }
        
    }

    void ProcessMine(const Feis::IGameInfo& info, Pos m,
                    std::vector<Pos>& builtConveyors,
                    const std::vector<std::pair<Pos,Pos>>& centerEntrances)
    {
        Pos linkEnd;
        auto path = FindNearestTarget(info, m, builtConveyors, centerEntrances, linkEnd);
        // build machine
        Feis::Direction d0 = dirs[0];
        for (auto d : dirs) {
            if (Feis::GetNeighborCellPosition(m, d) == path[0]) { d0 = d; break; }
        }
        actions_.push_back({ MachineType(d0), m });
        if (path.size() == 1) return;

        BuildConveyors(path, linkEnd, builtConveyors);
    }

    struct PairHash {
        std::size_t operator()(const std::pair<int, int>& p) const {
            return std::hash<int>()(p.first) ^ (std::hash<int>()(p.second) << 1);
        }
    };

    inline std::pair<int, int> ToKey(const Pos& p) {
        return {p.row, p.col};
    }

    void ProcessCombiners(
    const Feis::IGameInfo &info,
    const std::vector<Pos> &cbmines,
    std::vector<Pos> &builtConveyors,
    const std::vector<std::pair<Pos, Pos>> &centerEntrances)
{
    //std::cout << "[Debug] Enter ProcessCombiners(), total mines = " << cbmines.size() << "\n";

    std::unordered_map<int, Pos> entryCellBySecondVal;
    std::queue<Pos> q;
    for (const auto &m : cbmines) q.push(m);
    std::unordered_set<std::pair<int, int>, PairHash > visited;

    // Helper 1：tryConnectToExisting
    auto tryConnectToExisting = [&](const Pos &m) -> bool {
        auto bgM = dynamic_cast<const Feis::NumberCell*>(info.GetLayeredCell(m).GetBackground().get());
        if (!bgM) return false;
        int valM = bgM->GetNumber();

        auto it = entryCellBySecondVal.find(valM);
        if (it == entryCellBySecondVal.end()) return false;

        Pos entry = it->second;
        bool hasConveyorAtEntry = std::find(builtConveyors.begin(), builtConveyors.end(), entry) != builtConveyors.end();
        if (!hasConveyorAtEntry) return false;

        auto path = bfsBetween(info, m, entry);
        if (path.empty()) return false;

        BuildConveyors(path, entry, builtConveyors);
        return true;
    };

    // Helper 2：findPartner
    auto findPartner = [&](const Pos &m, Pos &otherOut) -> bool {
        auto bgM = dynamic_cast<const Feis::NumberCell*>(info.GetLayeredCell(m).GetBackground().get());
        if (!bgM) return false;
        int valM = bgM->GetNumber();

        // 先找出所有可以合成（和 m 相加可得 ScoredProduct）的 other 列表
        std::vector<Pos> candidates;
        for (auto &p : cbmines) {
            //std::cout << "[Debug] Try mine (" << m.row << "," << m.col << ")\n";
            if (p == m) continue;
            auto bgO = dynamic_cast<const Feis::NumberCell*>(
                        info.GetLayeredCell(p).GetBackground().get());
            if (!bgO) continue;
            int valO = bgO->GetNumber();
            if (info.IsScoredProduct(valM + valO)) {
                candidates.push_back(p);
            }
            if(candidates.size()>5) break;
        }
        if (candidates.empty()) return false;
        // 按照距離中心的遠近，把離 center 較近的放前面
        sortMines(candidates);
        // 只取最靠近 center 的第一個當作 partner
        otherOut = candidates.front();
        return true;
    };

    // Helper 3：findCombinerPlacement
    auto findCombinerPlacement = [&](const Pos &anchor, const Pos &other, Pos &combPos,
                                     Feis::Direction &combDir, Pos &entryCellForOther) -> bool {
        for (auto dAnchor : dirs) {
            Pos c = Feis::GetNeighborCellPosition(anchor, dAnchor);
            if (!Feis::IsWithinBoard(c)) continue;
            if (info.GetLayeredCell(c).GetForeground()) continue;

            Feis::Direction inDir1 = dAnchor;

            Pos base;
            std::vector<Feis::Direction> candidates;
            switch (inDir1) {
                case Feis::Direction::kLeft:   base = {c.row + 1, c.col}; candidates = {Feis::Direction::kLeft, Feis::Direction::kTop, Feis::Direction::kBottom}; break;
                case Feis::Direction::kTop:    base = {c.row, c.col - 1}; candidates = {Feis::Direction::kLeft, Feis::Direction::kTop, Feis::Direction::kBottom}; break;
                case Feis::Direction::kRight:  base = {c.row - 1, c.col}; candidates = {Feis::Direction::kLeft, Feis::Direction::kTop, Feis::Direction::kRight}; break;
                case Feis::Direction::kBottom: base = {c.row, c.col + 1}; candidates = {Feis::Direction::kBottom, Feis::Direction::kTop, Feis::Direction::kRight}; break;
            }
            if (!Feis::IsWithinBoard(base)) continue;

            auto IsValidSecondInput = [&](Pos candidatePos) {
                if (!Feis::IsWithinBoard(candidatePos)) return false;
                auto fg = info.GetLayeredCell(candidatePos).GetForeground();
                if (fg && !dynamic_cast<const Feis::ConveyorCell *>(fg.get())) return false;
                auto bg = info.GetLayeredCell(candidatePos).GetBackground();
                if (bg && dynamic_cast<const Feis::NumberCell *>(bg.get())) return false;
                return true;
            };

            Pos input2{-1, -1};
            std::vector<Pos> pathToInput2;
            bool foundSecond = false;
            for (auto dOther : candidates) {
                Pos candidate = Feis::GetNeighborCellPosition(base, dOther);
                if (!IsValidSecondInput(candidate)) continue;
                auto tmpPath = bfsBetween(info, other, candidate);
                if (tmpPath.empty()) continue;
                input2 = candidate;
                pathToInput2 = std::move(tmpPath);
                foundSecond = true;
                break;
            }
            if (!foundSecond) continue;

            Pos exitCell = Feis::GetNeighborCellPosition(c, combDir);
            if (Feis::IsWithinBoard(exitCell) && !info.GetLayeredCell(exitCell).GetForeground()) {
                actions_.push_back({ MachineType(inDir1), anchor });

                Feis::Direction dir0 = Feis::Direction::kLeft;
                Pos firstStep = pathToInput2[0];
                if      (firstStep.col > other.col) dir0 = Feis::Direction::kRight;
                else if (firstStep.col < other.col) dir0 = Feis::Direction::kLeft;
                else if (firstStep.row > other.row) dir0 = Feis::Direction::kBottom;
                else if (firstStep.row < other.row) dir0 = Feis::Direction::kTop;
                actions_.push_back({ MachineType(dir0), other });

                BuildConveyors(pathToInput2, input2, builtConveyors);
                actions_.push_back({ CombinerType(combDir), c });

                Pos linkEndCenter;
                auto pathToCenter = FindNearestTarget(info, exitCell, builtConveyors, centerEntrances, linkEndCenter);
                if (!pathToCenter.empty()) {
                    BuildConveyors(pathToCenter, linkEndCenter, builtConveyors);
                }

                combPos = c;
                entryCellForOther = input2;
                return true;
            }
        }
        return false;
    };

    std::unordered_map<std::pair<int, int>, int, PairHash> retryCount;
    int MAX_RETRY = 3;

    // Main Loop
    while (!q.empty()) {
        Pos m = q.front(); q.pop();
        if (visited.count(ToKey(m))) continue;

        if (tryConnectToExisting(m)) {
            visited.insert(ToKey(m));
            continue;
        }

        Pos partner;
        if (!findPartner(m, partner)) {
            continue;
        }

        Pos combPos, entryCellForOther;
        Feis::Direction combDir = Feis::Direction::kRight;
        if (findCombinerPlacement(m, partner, combPos, combDir, entryCellForOther)) {
            visited.insert(ToKey(m));
            visited.insert(ToKey(partner));

            auto bg = dynamic_cast<const Feis::NumberCell*>(info.GetLayeredCell(partner).GetBackground().get());
            if (bg) {
                int val = bg->GetNumber();
                entryCellBySecondVal[val] = entryCellForOther;
            }
        } else {
            retryCount[ToKey(m)]++;
            if (retryCount[ToKey(m)] < MAX_RETRY) {
                q.push(m);
            } else {
                //std::cout << "[Debug] Give up on mine at " << m.row << "," << m.col << "\n";
                visited.insert(ToKey(m));  // 永久放棄這個礦
            }
        }

    }
}


    void initialize(const Feis::IGameInfo &info) {
        auto centerEntrances = GetCenterEntrances(info);

        std::vector<Pos> cbmines;
        auto mines = GetScoredMines(info, cbmines);  

        std::vector<Pos> builtConveyors;
        for (auto m : mines) {
            ProcessMine(info, m, builtConveyors, centerEntrances);
        }
        ProcessCombiners(info, cbmines, builtConveyors, centerEntrances);
        initialized_ = true;
    }

public:
    Feis::PlayerAction GetNextAction(const Feis::IGameInfo &info) override {
        if (!initialized_) initialize(info);
        if (action_index_ < actions_.size()) {
            auto a = actions_[action_index_++];
            return { a.type, a.pos };
        }
        return { Feis::PlayerActionType::None, {0,0} };
    }
};
